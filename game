<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Malaria Heroes</title>
<!-- Load fonts for professional look -->
<link href="https://fonts.googleapis.com/css2?family=Nunito&display=swap" rel="stylesheet"/>
</head>
<style>
body {
  font-family: 'Nunito', sans-serif; 
  background: #f0f4f8;
  margin: 0;
  padding: 0;
}
#topbar {
  display: flex;
  justify-content: flex-end;
  padding: 10px;
}
#language-btn {
  padding: 8px 12px;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
#game-container {
  max-width: 1200px;
  margin: auto;
  padding: 20px;
  position: relative;
}
#mission-area {
  border: 2px solid #ccc;
  padding: 15px;
  min-height: 400px;
  background: #fff;
  border-radius: 8px;
}
#feedback {
  margin-top: 15px;
  padding: 10px;
  border-radius: 6px;
  background: #e9ecef;
}
#progress {
  margin-top: 15px;
}
button {
  padding: 10px 15px;
  font-family: 'Nunito', sans-serif;
  font-size: 1em;
  margin-top: 10px;
  cursor: pointer;
}
input[type=text] {
  padding: 8px;
  width: 200px;
  font-family: 'Nunito', sans-serif;
}
#certificate {
  display: none;
  padding: 20px;
  border: 3px solid #333;
  border-radius: 10px;
  background: #fff;
}
#certificate h2 {
  text-align: center;
}
#certificate placehoder {
  margin-top: 20px;
  text-align: center;
}
</style>
<body>

<div id="topbar">
  <button id="language-btn">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</button>
</div>
<div id="game-container">
  <h1 style="text-align:center;">ü¶ü Malaria Heroes</h1>
  <div id="mission-area"></div>
  <div id="feedback"></div>
  <div id="progress"></div>
  <button id="next-btn" style="display:none;">Next Mission</button>
</div>

<!-- Popup modal for final certificate -->
<div id="final-modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.6); align-items:center; justify-content:center;">
  <div style="background:#fff; padding:20px; border-radius:10px; max-width:500px; width:90%; text-align:center;">
    <h2 id="final-title"></h2>
    <div>
      <label>Enter your name: </label>
      <input type="text" id="player-name"/>
    </div>
    <button onclick="generateCertificate()">Download Certificate</button>
    <button onclick="closeFinalModal()">Close</button>
  </div>
</div>
<!-- Canvas for certificate -->
<canvas id="certificate-canvas" style="display:none;"></canvas>

<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script>
// Translations
const translations = {
  en: {
    langBtn: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
    title: "ü¶ü Malaria Heroes",
    next: "Next Mission",
    finalTitle: "Congratulations! You Completed All Missions!",
    enterName: "Enter your name:",
    downloadCert: "Download Certificate",
    missionClinic: "Clinical Diagnosis Mission",
    missionSchool: "Bed Net Distribution",
    missionMarket: "Health Education Campaign",
    missionHomes: "Mosquito Breeding Investigation",
    successMsg: "Well done! Proceed to the next mission.",
    attemptMsg: "Maximum attempts reached! Focus on remaining sites.",
    helpMsg: "Scientific hints are now available. Use them to find remaining breeding sites.",
    correct: "‚úÖ Correct!",
    wrong: "‚ùå Wrong.",
    selectSymptoms: "Select symptoms that match malaria signs.",
    selectSites: "Identify actual mosquito breeding sites.",
    selectProtection: "Choose effective prevention methods.",
    symptomFever: "Fever",
    symptomHeadache: "Headache",
    symptomChills: "Chills",
    symptomNausea: "Nausea",
    symptomFatigue: "Fatigue",
    siteWaterTank: "Water Tank",
    sitePuddle: "Puddle",
    siteTires: "Discarded Tires",
    sitePlantPot: "Plant Saucers",
    siteDrain: "Flowing Drain",
    siteStream: "Nearby Stream",
    approachInfo: "Effective prevention methods include using bed nets, eliminating stagnant water, and community cleanup.",
    // ... add more translations as needed
  },
  hi: {
    langBtn: "English",
    title: "ü¶ü ‡§Æ‡§≤‡•á‡§∞‡§ø‡§Ø‡§æ ‡§π‡•Ä‡§∞‡•ã‡§ú",
    next: "‡§Ö‡§ó‡§≤‡•Ä ‡§Æ‡§ø‡§∂‡§®",
    finalTitle: "‡§¨‡§ß‡§æ‡§à ‡§π‡•ã! ‡§Ü‡§™ ‡§∏‡§≠‡•Ä ‡§Æ‡§ø‡§∂‡§® ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞ ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç!",
    enterName: "‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:",
    downloadCert: "‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
    missionClinic: "‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï ‡§®‡§ø‡§¶‡§æ‡§® ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§®",
    missionSchool: "‡§¨‡•á‡§° ‡§®‡•á‡§ü ‡§µ‡§ø‡§§‡§∞‡§£",
    missionMarket: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§®",
    missionHomes: "‡§Æ‡§ö‡•ç‡§õ‡§∞ ‡§™‡•ç‡§∞‡§ú‡§®‡§® ‡§∏‡•ç‡§•‡§≤ investigation",
    successMsg: "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! ‡§Ö‡§ó‡§≤‡•á ‡§Æ‡§ø‡§∂‡§® ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç‡•§",
    attemptMsg: "‡§Æ‡•à‡§ï‡•ç‡§∏‡§ø‡§Æ‡§Æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§™‡•Ç‡§∞‡•á ‡§π‡•ã ‡§ó‡§è! ‡§∂‡•á‡§∑ ‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    helpMsg: "‡§µ‡•à‡§ú‡•ç‡§û‡§æ‡§®‡§ø‡§ï ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§Ö‡§¨ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡§Ç‡•§ ‡§â‡§®‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
    correct: "‚úÖ ‡§∏‡§π‡•Ä!",
    wrong: "‚ùå ‡§ó‡§≤‡§§‡•§",
    selectSymptoms: "‡§Æ‡§≤‡•á‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§∏‡§Ç‡§ï‡•á‡§§‡•ã‡§Ç ‡§∏‡•á ‡§Æ‡•á‡§≤ ‡§ñ‡§æ‡§§‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§",
    selectSites: "‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§Æ‡§ö‡•ç‡§õ‡§∞ ‡§™‡•ç‡§∞‡§ú‡§®‡§® ‡§∏‡•ç‡§•‡§≤ ‡§™‡§π‡§ö‡§æ‡§®‡•á‡§Ç‡•§",
    selectProtection: "‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ ‡§µ‡§ø‡§ß‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç‡•§",
    symptomFever: "‡§¨‡•Å‡§ñ‡§æ‡§∞",
    symptomHeadache: "‡§§‡•á‡§ú ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶",
    symptomChills: "‡§ï‡§Ç‡§™‡§ï‡§Ç‡§™‡•Ä ‡§î‡§∞ ‡§™‡§∏‡•Ä‡§®‡§æ",
    symptomNausea: "‡§Æ‡§§‡§≤‡•Ä",
    symptomFatigue: "‡§•‡§ï‡§æ‡§®",
    siteWaterTank: "‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§ü‡•à‡§Ç‡§ï",
    sitePuddle: "‡§ó‡§°‡•ç‡§¢‡§æ",
    siteTires: "‡§´‡•á‡§Ç‡§ï‡•á ‡§ó‡§è ‡§ü‡§æ‡§Ø‡§∞",
    sitePlantPot: "‡§™‡•ç‡§≤‡§æ‡§Ç‡§ü ‡§∏‡•â‡§ï‡§∞",
    siteDrain: "‡§´‡•ç‡§≤‡•ã‡§á‡§Ç‡§ó ‡§°‡•ç‡§∞‡•á‡§®",
    siteStream: "‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§∏‡•ç‡§∞‡•ã‡§§",
    approachInfo: "‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ø‡§∏‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§≤, ‡§∏‡•ç‡§•‡•à‡§§‡§ø‡§ï ‡§™‡§æ‡§®‡•Ä ‡§ï‡•ã ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡§æ, ‡§î‡§∞ ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§∏‡§´‡§æ‡§à ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç‡•§",
    // ... add more translations as needed
  }
};
let currentLang = 'en';

// Utility for translation
function t(key) {
  return translations[currentLang][key] || key;
}

// State variables
let gameStage = 0; // 0 to 4 for four missions
let wrongAttempts = 0;
const MAX_WRONG_ATTEMPTS = 3;
let helpShown = false;
let languageBtn = document.getElementById('language-btn');
let missionDiv = document.getElementById('mission-area');
let feedbackDiv = document.getElementById('feedback');
let progressDiv = document.getElementById('progress');
let nextBtn = document.getElementById('next-btn');

function toggleLanguage() {
  if(currentLang==='en'){
    currentLang='hi';
    languageBtn.innerText='English';
  }else{
    currentLang='en';
    languageBtn.innerText='‡§π‡§ø‡§®‡•ç‡§¶‡•Ä';
  }
  loadMission();
}

languageBtn.onclick=toggleLanguage;

// Initialize first mission
loadMission();

// Function to load mission based on stage
function loadMission() {
  feedbackDiv.innerHTML='';
  document.getElementById('next-btn').style.display='none';
  switch(gameStage){
    case 0:
      loadClinic();
      break;
    case 1:
      loadSchool();
      break;
    case 2:
      loadMarket();
      break;
    case 3:
      loadHomes();
      break;
    case 4:
      showFinalCertificate();
      break;
  }
}

function showProgress() {
  progressDiv.innerHTML=`‡§Æ‡§ø‡§∂‡§® ${gameStage} ‡§∏‡•á ${4} ‡§§‡§ï`; // 4 missions total
}

// CLINIC FUNCTION
function loadClinic() {
  missionDiv.innerHTML=`
    <h2>${t('missionClinic')}</h2>
    <p>Kojo ‡§ï‡•ã 2 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§î‡§∞ ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§π‡•à‡•§ ‡§®‡•Ä‡§ö‡•á ‡§â‡§®‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§</p>
    <input type="checkbox" id="symptomF" /> <label for="symptomF">${t('symptomFever')}</label><br/>
    <input type="checkbox" id="symptomH" /> <label for="symptomH">${t('symptomHeadache')}</label><br/>
    <input type="checkbox" id="symptomC" /> <label for="symptomC">${t('symptomChills')}</label><br/>
    <input type="checkbox" id="symptomN" /> <label for="symptomN">${t('symptomNausea')}</label><br/>
    <input type="checkbox" id="symptomFAt" /> <label for="symptomFAt">${t('symptomFatigue')}</label><br/>
    <button onclick="checkClinic()">Submit</button>`;
  feedbackDiv.innerHTML='';
  wrongAttempts=0;
  helpShown=false;
  showProgress();
}

// CLINIC CHECK
function checkClinic() {
  let selF = document.getElementById('symptomF').checked;
  let selH = document.getElementById('symptomH').checked;
  let selC = document.getElementById('symptomC').checked;
  let selN = document.getElementById('symptomN').checked;
  let selFAt = document.querySelector('#symptomFAt').checked;

  // Correct signs for malaria:
  // Fever, Headache, Chills, Fatigue are typical. Nausea is less specific.
  let correctSigns = {
    fever: selF,
    headache: selH,
    chills: selC,
    fatigue: selFAt
  };
  let correctSelected = correctSigns.fever && correctSigns.headache && correctSigns.chills && correctSigns.fatigue;

  // Wrong selections:
  let wrongSigns = [];
  if (selN) wrongSigns.push(t('symptomNausea'));
  if (!selF) wrongSigns.push(t('symptomF'));
  if (!selH) wrongSigns.push(t('symptomH'));
  if (!selC) wrongSigns.push(t('symptomC'));
  if (!selFAt) wrongSigns.push(t('symptomFAt'));

  if (correctSelected && wrongSigns.length===0) {
    feedbackDiv.innerHTML=`<p style="color:green;">${t('correct')} | Malaria ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§∏‡§π‡•Ä ‡§π‡•à‡§Ç‡•§</p>`;
    nextBtn.style.display='block'; nextBtn.onclick=nextMission;
  } else {
    wrongAttempts++;
    feedbackDiv.innerHTML=`<p style="color:red;">${t('wrong')}<br/>${wrongSigns.length>0 ? wrongSigns.join(', ') : ''}</p>`;
    if (wrongAttempts>=MAX_WRONG_ATTEMPTS && !helpShown) {
      showHelpHint('clinic');
    }
  }
}

// SCHOOL
function loadSchool() {
  let html=`
    <h2>${t('missionSchool')}</h2>
    <p>‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ 12 ‡§¨‡§ø‡§∏‡•ç‡§§‡§∞ ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§ï‡•á‡§µ‡§≤ 7 ‡§ú‡§æ‡§≤ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞ (‡§õ‡•ã‡§ü‡•á ‡§¨‡§ö‡•ç‡§ö‡•á) ‡§î‡§∞ ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§µ‡§æ‡§≤‡•á ‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§¶‡•á‡§ï‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§</p>
    <div id="beds-container" style="display:flex; flex-wrap:wrap;">`;
  for (let i=1;i<=12;i++){
    html+=`<div style="margin:8px; padding:8px; border:1px solid #aaa; border-radius:4px;">
      <p>‡§¨‡•á‡§° ${i} (‡§Ü‡§Ø‡•Å: ${i<=4?'‡§õ‡•ã‡§ü‡§æ':'‡§¨‡§°‡§º‡§æ'})</p>
      <button onclick="protectBed(${i})" id="bed${i}">‡§ú‡§æ‡§≤ ‡§≤‡§ó‡§æ‡§ì</button>
      <div id="status${i}"></div>
    </div>`;
  }
  html+=`</div>
    <button onclick="submitSchool()">‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç</button>`;
  missionDiv.innerHTML=html;
  window.bedProtectionStatus = Array(13).fill(false);
  wrongAttempts=0;
  helpShown=false;
  showProgress();
}

function protectBed(i){
  if (window.bedProtectionStatus[i]) return;
  window.bedProtectionStatus[i]=true;
  document.getElementById('status'+i).innerText='‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§';
}

function submitSchool() {
  const protectedCount = window.bedProtectionStatus.filter(p=>p).length;
  let correct = protectedCount>=7; // assume good protection if >=7 beds protected
  if (correct) {
    feedbackDiv.innerHTML=`<p style="color:green;">${t('correct')} | ‡§∏‡§≠‡•Ä ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•ã ‡§ú‡§æ‡§≤ ‡§≤‡§ó‡§æ‡§®‡§æ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§</p>`;
    nextBtn.style.display='block'; nextBtn.onclick=nextMission;
  } else {
    wrongAttempts++;
    feedbackDiv.innerHTML=`<p style="color:red;">${t('wrong')} | ‡§Ö‡§≠‡•Ä ${protectedCount} ‡§ú‡§æ‡§≤ ‡§≤‡§ó‡§æ‡§è ‡§ó‡§è ‡§π‡•à‡§Ç‡•§</p>`;
    if (wrongAttempts>=MAX_WRONG_ATTEMPTS && !helpShown){
      showHelpHint('school');
    }
  }
}

// MARKET
function loadMarket() {
  let html=`
    <h2>${t('missionMarket')}</h2>
    <p>‡§Ø‡§π‡§æ‡§Å ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ï‡•á ‡§™‡§æ‡§®‡•Ä ‡§ï‡•á ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§ï‡•Ä ‡§∏‡§´‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ï‡•á‡§µ‡§≤ ‡§ó‡§Ç‡§¶‡•á ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§π‡•Ä ‡§™‡•ç‡§∞‡§ú‡§®‡§® ‡§∏‡•ç‡§•‡§≤ ‡§π‡•à‡§Ç‡•§</p>`;
  const sites=['Water Tank','Puddle','Tires','Plant Saucers','Drain','Stream'];
  const hinder=["Cleaned water","Clear puddle","Tires discarded","Plants watered","Drain flowing","Stream flowing"];
  const decoys=["Tree base","Dry ground","Empty container","Birdbath","Flowing river","Rock"];
  let items=sites.concat(decoys);
  let btns='';
  for (let i=0; i<items.length;i++){
    btns+=`<button onclick="cleanSite('${items[i]}')">${items[i]}</button>`;
  }
  html+=btns;
  html+=`<br/><button onclick="submitMarket()">‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç</button>`;
  missionDiv.innerHTML=html;
  window.cleanedSites={}; // keep track
  wrongAttempts=0;
  helpShown=false;
  showProgress();
}
function cleanSite(name){
  window.cleanedSites[name]=true;
  document.querySelectorAll(`button`).forEach(b=>{
    if (b.innerText===name && !b.disabled){
      b.style.background='lightgreen';
      b.disabled=true;
    }
  });
}

function submitMarket() {
  let validSites=['Water Tank','Puddle','Tires','Plant Saucers','Drain','Stream'];
  const cleanedCount = Object.keys(window.cleanedSites).filter(s=>validSites.includes(s)).length;
  if (cleanedCount>=4) {
    feedbackDiv.innerHTML=`<p style="color:green;">${t('correct')} | ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§∏‡§æ‡§´-‡§∏‡§´‡§æ‡§à ‡§π‡•Å‡§à ‡§π‡•à‡•§</p>`;
    nextBtn.style.display='block'; nextBtn.onclick=nextMission;
  } else {
    wrongAttempts++;
    feedbackDiv.innerHTML=`<p style="color:red;">${t('wrong')} | ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ${4 - cleanedCount} ‡§∏‡•ç‡§•‡§≤ ‡§Ö‡§®‡§∏‡§æ‡§´ ‡§π‡•à‡§Ç‡•§</p>`;
    if (wrongAttempts>=MAX_WRONG_ATTEMPTS && !helpShown) {
      showHelpHint('market');
    }
  }
}

// HOMES
function loadHomes() {
  // Generate 8 locations, 4 breeding sites + 4 decoys
  let sites=[
    {name: t('siteWaterTank'), real:true},
    {name: t('sitePuddle'), real:true},
    {name: t('siteTires'), real:true},
    {name: t('sitePlantPot'), real:true},
    {name: "Old Bottle", real:false},
    {name: "Broken Tire", real:false},
    {name: "Dry Leaves", real:false},
    {name: "Disused Container", real:false},
  ];
  // shuffle
  sites.sort(()=>Math.random()-0.5);
  let html='<h2>‡§ò‡§∞ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§ú‡§®‡§® ‡§∏‡•ç‡§•‡§≤ ‡§ñ‡•ã‡§ú‡•á‡§Ç</h2><p>‡§∏‡§π‡•Ä ‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§</p><div style="display:flex; flex-wrap:wrap;">';
  sites.forEach((site,i)=>{
    html+=`<button id="homebtn${i}" style="margin:8px; padding:8px;" onclick="checkBreedingSite('${site.name}',${site.real?1:0},${i})">${site.name}</button>`;
  });
  html+='</div><button onclick="submitHomes()">‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç</button>';
  missionDiv.innerHTML=html;
  window.homeSites=sites;
  wrongAttempts=0;
  helpShown=false;
  showProgress();
}

// check breeding site
function checkBreedingSite(name, isReal, idx){
  // allow multiple attempts
  if (document.getElementById('homebtn'+idx).disabled) return;
  if (isReal===1){
    // correct
    document.getElementById('homebtn'+idx).disabled=true;
    document.getElementById('homebtn'+idx).innerText=name+" ‚úîÔ∏è";
  } else {
    // incorrect
    document.getElementById('homebtn'+idx).disabled=true;
    document.getElementById('homebtn'+idx).innerText=name+" ‚úñÔ∏è";
  }
}

// Submit homes
function submitHomes() {
  let correctCount=0;
  window.homeSites.forEach((site,i)=>{
    const btn=document.getElementById('homebtn'+i);
    if (btn.innerText.includes('‚úîÔ∏è')){
      if (site.real){correctCount++;}
    }
  });
  if (correctCount>=4){ 
    feedbackDiv.innerHTML=`<p style="color:green;">${t('correct')} | ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™‡§®‡•á ‡§∏‡§π‡•Ä ‡§∏‡•ç‡§•‡§æ‡§® ‡§ñ‡•ã‡§ú ‡§≤‡§ø‡§è‡•§</p>`;
    nextBtn.style.display='block'; nextBtn.onclick=nextMission;
  } else {
    wrongAttempts++;
    feedbackDiv.innerHTML=`<p style="color:red;">${t('wrong')} | ‡§Ü‡§™ ‡§®‡•á ${correctCount} ‡§∏‡§π‡•Ä ‡§∏‡•ç‡§•‡§æ‡§® ‡§ñ‡•ã‡§ú‡•á ‡§π‡•à‡§Ç‡•§</p>`;
    if (wrongAttempts>=MAX_WRONG_ATTEMPTS && !helpShown){
      showHelpHint('homes');
    }
  }
}

// Show help hint
function showHelpHint(location) {
  helpShown=true;
  alert(t('helpMsg'));
}

// Next mission
function nextMission() {
  gameStage++;
  loadMission();
}

// FINAL with certificate
function showFinalCertificate() {
  document.getElementById('mission-area').innerHTML='<h2>‡§Ü‡§™‡§®‡•á ‡§∏‡§≠‡•Ä ‡§Æ‡§ø‡§∂‡§® ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞ ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç!</h2>';
  document.getElementById('feedback').innerHTML='';
  document.getElementById('next-btn').style.display='none';
  document.getElementById('final-modal').style.display='flex';
}

function closeFinalModal() {
  document.getElementById('final-modal').style.display='none';
}

// Generate certificate
function generateCertificate() {
  const name = document.getElementById('player-name').value.trim();
  if (!name) { alert('‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§'); return; }
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  // Create certificate background
  canvas.width=800; canvas.height=600;
  ctx.fillStyle='#fff';
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font='30px Nunito';
  ctx.fillStyle='#333';
  ctx.fillText('‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞',200,80);
  ctx.font='22px Nunito';
  ctx.fillText(`‡§Ø‡§π ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø`,250,130);
  ctx.font='28px Nunito bold';
  ctx.fillText(`${name}`,300,180);
  ctx.font='20px Nunito';
  ctx.fillText(`‡§®‡•á ‡§Æ‡§≤‡•á‡§∞‡§ø‡§Ø‡§æ ‡§∞‡•ã‡§ï‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§`,150,230);
  ctx.fillText(`‚Äî ‡§á‡§∏ ‡§ñ‡•á‡§≤ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§Ü‡§™‡§®‡•á ‡§∏‡§π‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡•Ä‡•§`,150,260);
  ctx.fillText(`‡§â‡§≤‡•ç‡§≤‡•á‡§ñ‡§®‡•Ä‡§Ø ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø`,350,330);
  ctx.strokeStyle='#000';
  ctx.strokeRect(250,350,300,100);
  ctx.font='20px Nunito';
  ctx.fillText('‡§Ø‡§π ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§π‡•à‡•§',260,430);
  // Save as image
  html2canvas(canvas).then(c => {
    const link = document.createElement('a');
    link.href = c.toDataURL('image/png');
    link.download = 'Certificate_of_Achievement.png';
    link.click();
  });
}

// START button initial
window.onload=function() {
  // All initializations are happening in loadMission()
};
</script>
